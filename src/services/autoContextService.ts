import axios from 'axios';
import { API_ENDPOINTS } from '@/api/endpoints';
import { ApiResponseHandler, CommonApiResponses, type ApiResponse } from '@/helpers';

// Helper function to get auth headers
const getAuthHeaders = () => {
  const token = localStorage.getItem('token');
  return {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  };
};

// Interface for auto-generated context response
export interface AutoGeneratedContext {
  business_type: string;
  photography_style: string;
  brand_personality: string;
  target_audience_details: string;
  visual_references: string[];
}

// Interface for generate request
export interface GenerateAutoContextRequest {
  force_regenerate?: boolean;
}

// Auto Context service
export const autoContextService = {
  /**
   * Generate business context automatically using AI
   * @param force_regenerate - Force regeneration even if context already exists
   */
  generateContext: async (force_regenerate: boolean = false): Promise<ApiResponse<{
    message: string;
    context: AutoGeneratedContext;
    was_generated: boolean;
  }>> => {
    try {
      const payload: GenerateAutoContextRequest = {};
      if (force_regenerate) {
        payload.force_regenerate = true;
      }

      const response = await axios.post(
        API_ENDPOINTS.AUTO_CONTEXT.GENERATE,
        payload,
        {
          headers: getAuthHeaders()
        }
      );
      
      if (response.data && response.data.success) {
        return ApiResponseHandler.success(
          {
            message: response.data.message || 'Contexto generado exitosamente',
            context: response.data.context,
            was_generated: response.data.was_generated !== false
          },
          response.data.message || 'Contexto generado exitosamente'
        );
      }
      
      return ApiResponseHandler.error(
        'INVALID_RESPONSE',
        'Respuesta inválida del servidor',
        'El servidor no devolvió un contexto válido'
      );
    } catch (error: any) {
      if (error.response?.status === 401) {
        return CommonApiResponses.auth.sessionExpired();
      }
      
      if (error.response?.status === 404) {
        return ApiResponseHandler.error(
          'NOT_FOUND',
          'Información de empresa no encontrada',
          'Debes completar primero la información básica de tu empresa'
        );
      }

      if (error.response?.status === 400) {
        return ApiResponseHandler.error(
          'VALIDATION_ERROR',
          'Error de validación',
          error.response?.data?.error || 'No se pudo generar el contexto'
        );
      }
      
      if (error.response?.status === 500) {
        return ApiResponseHandler.error(
          'INTERNAL_ERROR',
          'Error del servidor',
          error.response?.data?.error || 'Ocurrió un error al generar el contexto con IA'
        );
      }
      
      return ApiResponseHandler.handleHttpError(error);
    }
  },

  /**
   * View current auto-generated context
   */
  viewContext: async (): Promise<ApiResponse<{
    has_context: boolean;
    context?: AutoGeneratedContext;
  }>> => {
    try {
      const response = await axios.get(
        API_ENDPOINTS.AUTO_CONTEXT.VIEW,
        {
          headers: getAuthHeaders()
        }
      );
      
      if (response.data && response.data.success) {
        return ApiResponseHandler.success(
          {
            has_context: response.data.has_context,
            context: response.data.context
          },
          'Contexto obtenido exitosamente'
        );
      }
      
      return ApiResponseHandler.error(
        'INVALID_RESPONSE',
        'Respuesta inválida del servidor',
        'El servidor no devolvió información válida'
      );
    } catch (error: any) {
      if (error.response?.status === 401) {
        return CommonApiResponses.auth.sessionExpired();
      }
      
      if (error.response?.status === 404) {
        return ApiResponseHandler.error(
          'NOT_FOUND',
          'Información de empresa no encontrada',
          'No se ha configurado información de empresa'
        );
      }
      
      return ApiResponseHandler.handleHttpError(error);
    }
  }
};

export default autoContextService;

